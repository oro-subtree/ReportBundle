{% extends 'OroUIBundle:actions:update.html.twig' %}
{% form_theme form with ['OroFormBundle:Form:fields.html.twig'] %}
{% import 'OroQueryDesignerBundle::macros.html.twig' as QD %}

{% oro_title_set({params : {"%report.name%": entity.name} }) %}
{% set formAction = form.vars.value.id ? path('oro_report_update', { 'id': form.vars.value.id }) : path('oro_report_create')  %}

{% block head_script %}
    {{ parent() }}

    {% block stylesheets %}
        {{ form_stylesheet(form) }}
    {% endblock %}
{% endblock %}

{% block navButtons %}
    {% if form.vars.value.id and resource_granted('DELETE', form.vars.value) %}
        {{ UI.deleteButton({
            'dataUrl': path('oro_api_delete_report', {'id': form.vars.value.id}),
            'dataRedirect': path('oro_report_index'),
            'aCss': 'no-hash remove-button',
            'id': 'btn-remove-report',
            'dataId': form.vars.value.id,
            'entity_label': 'oro.report.entity_label'|trans
        }) }}

        {{ UI.buttonSeparator() }}
    {% endif %}
    {{ UI.cancelButton(path('oro_report_index')) }}
    {% if form.vars.value.id or resource_granted('oro_report_update') %}
        {{ UI.saveAndStayButton() }}
    {% endif %}
    {{ UI.saveAndCloseButton() }}
{% endblock %}

{% block pageHeader %}
    {% if form.vars.value.id %}
        {% set breadcrumbs = {
            'entity':      form.vars.value,
            'indexPath':   path('oro_report_index'),
            'indexLabel': 'oro.report.entity_plural_label'|trans,
            'entityTitle': entity.name
        } %}
        {{ parent() }}
    {% else %}
        {% set title = 'New Report'|trans %}
        {% include 'OroUIBundle::page_title_block.html.twig' %}
    {% endif %}
{% endblock pageHeader %}

{% block content_data %}
    {% set id = 'report-profile' %}
    {% set ownerDataBlock = {
        'dataBlocks': [{
            'subblocks': [{
                'data': []
            }]
        }]
    } %}

    {% set ownerDataBlock = oro_form_process(ownerDataBlock, form) %}
    {% set dataBlocks = [{
            'title': 'General'|trans,
            'class': 'active',
            'subblocks': [
                {
                    'title': '',
                    'data': [
                        form_row(form.name, {'label': 'oro.report.name.label'|trans}),
                        form_row(form.description, {
                            'label': 'oro.report.description.label'|trans,
                            'attr': {
                                'class': 'report-descr'
                            }
                        })
                    ]
                },
                {
                    'title': '',
                    'data': [
                        form_row(form.entity, {'label': 'oro.report.entity.label'|trans}),
                        form_row(form.type, {'label': 'oro.report.type.label'|trans}),
                        ownerDataBlock.dataBlocks[0].subblocks[0].data[0]
                    ]
                }
            ]
        }]
    %}

    {% set dataBlocks = dataBlocks|merge( [{
        'title' : 'oro.report.form.designer'|trans,
        'content_attr': {'id': 'report-designer', 'data-metadata': metadata|json_encode|raw},
        'subblocks': [
            {
                'title': 'oro.report.form.columns'|trans,
                'spanClass': 'report-columns responsive-cell',
                'data': [
                    QD.query_designer_grouping_form(
                        form.grouping,
                        {
                            'id': 'report-grouping-form'
                        }, {
                            'entity_choice_id': 'oro_report_form_entity'
                        }),
                    QD.query_designer_column_form(
                        form.column,
                        {
                            'id': 'report-column-form'
                        }, {
                            'entity_choice_id': 'oro_report_form_entity'
                        }),
                    QD.query_designer_column_list(),
                    QD.query_designer_column_template('report-column-row'),
                    QD.query_designer_grouping_item_template('report-grouping-item-row')
                ]
            },
            {
                'title': 'oro.report.form.filters'|trans,
                'spanClass': 'report-filters responsive-cell',
                'data': [
                    QD.query_designer_condition_builder({
                        'id': 'report-condition-builder',
                        'entity_choice_id': 'oro_report_form_entity'
                    })
                ]
            },
        ]
    }] ) %}

    {% set data = {
        'formErrors': form_errors(form)? form_errors(form) : null,
        'dataBlocks': dataBlocks,
        'hiddenData': form_widget(form.definition)
    } %}

    {{ UI.scrollData(id, data, form) }}

    {{ QD.query_designer_column_chain_template('report-column-chain-template') }}

    {% set entityFieldsRouteParams = {
        'with-relations': 1,
        'with-entity-details': 1,
        'deep-level': 2
    } %}
    <script type="text/javascript">
        require(['jquery', 'underscore', 'oro/translator', 'oro/loading-mask', 'oro/delete-confirmation',
            'oroentity/js/fields-loader'],
            function ($, _, __, LoadingMask, DeleteConfirmation) {
                var $entityChoice = $('#oro_report_form_entity');
                var loadingMask = new LoadingMask();
                var confirm = new DeleteConfirmation({
                    title: __('Change Entity Confirmation'),
                    okText: __('Yes, I Agree'),
                    content: __('Are you sure you want to change entity?')
                });

                $('#report-designer').append(loadingMask.render().$el);

                $entityChoice
                    .fieldsLoader({
                        router: 'oro_api_get_entity_fields',
                        routingParams: {{ entityFieldsRouteParams|json_encode|raw }},
                        confirm: confirm,
                        requireConfirm: function () {
                            var data = $('#oro_report_form_definition').val();
                            if (!data) {
                                return false;
                            }
                            try {
                                data = JSON.parse(data);
                            } catch (e) {
                                return false;
                            }
                            return _.some(data, function (value) {
                                return !_.isEmpty(value);
                            });
                        }
                    })
                    .on('fieldsloaderstart', $.proxy(loadingMask.show, loadingMask))
                    .on('fieldsloadercomplete', $.proxy(loadingMask.hide, loadingMask));

                {% if not form.entity.vars.value is empty %}
                {% set fieldsData = render(path('oro_api_get_entity_fields', {
                        'entityName': form.entity.vars.value|replace({'\\': '_'})
                    }|merge(entityFieldsRouteParams))) %};
                $entityChoice.fieldsLoader('setFieldsData', {{ fieldsData|raw }});
                {% endif %}
            });
    </script>


    <script type="text/javascript">
        require(['jquery', 'underscore', 'backbone',
            'oroquerydesigner/js/items-manager/grouping-model',
            'oroquerydesigner/js/items-manager/column-model',
            'oroentity/js/field-choice',
            'oroui/js/items-manager/editor', 'oroui/js/items-manager/table'],
        function($, _, Backbone, GroupingModel, ColumnModel) {
            $(function() {
                var entities = {{ entities|json_encode|raw }};

                // common extra options for field-choice inputs
                var fieldChoiceOptions = {
                    select2: {
                        formatSelectionTemplate: $('#report-column-chain-template').text()
                    },
                    util: {
                        findEntity:  function (entityName) {
                            return _.findWhere(entities, {name: entityName});
                        }
                    }
                };

                // mixin extra options to condition-builder's field choice
                var $fieldConditionCriteria = $('#filter-criteria-list').find('[data-criteria=condition-item]');
                $.extend(true, $fieldConditionCriteria.data('options'), {
                    fieldChoice: fieldChoiceOptions,
                    filters: {{ metadata.filters|json_encode|raw }}
                });

                // data loader
                var $storage = $('#oro_report_form_definition');
                var load = function () {
                    var data = $storage.val();
                    return data ? JSON.parse(data) : {};
                };

                // grouping
                var $groupingEditForm = $('#report-grouping-form');
                var $groupingFieldChoice = $groupingEditForm.find('[data-purpose=column-selector]');
                $groupingFieldChoice.fieldChoice(fieldChoiceOptions, {{ metadata.grouping|json_encode|raw }});

                var entityFieldUtil = $groupingFieldChoice.data('oroentity-fieldChoice').entityFieldUtil;
                var formatSelectionTemplate = _.template(fieldChoiceOptions.select2.formatSelectionTemplate);

                var groupingCollection = new (Backbone.Collection)(load().grouping_columns, {model: GroupingModel});
                groupingCollection.on('add remove sort', function () {
                    var data = load();
                    data.grouping_columns = groupingCollection.toJSON();
                    $storage.val(JSON.stringify(data));
                });

                $groupingEditForm.itemsManagerEditor({
                    namePattern:  /^oro_report_form\[grouping\]\[([\w\W]*)\]$/,
                    collection: groupingCollection
                });
                $groupingEditForm.find('.grouping-item-container').itemsManagerTable({
                    collection: groupingCollection,
                    itemTemplate: $('#report-grouping-item-row').html(),
                    itemRender: function (tmpl, data) {
                        var name = entityFieldUtil.splitFieldId(data.name);
                        data.name = formatSelectionTemplate(name);
                        return tmpl(data);
                    }
                });
                // end grouping

                // columns
                var $columnEditForm = $('#report-column-form');
                var $columnFieldChoice = $columnEditForm.find('[data-purpose=column-selector]');
                $columnFieldChoice.fieldChoice(fieldChoiceOptions);

                $columnEditForm.find('[data-purpose=function-selector]').functionChoice({
                    converters: {{ metadata.converters|json_encode|raw }},
                    aggregates: {{ metadata.aggregates|json_encode|raw }}
                });

                var columnCollection = new (Backbone.Collection)(load().columns, {model: ColumnModel});
                columnCollection.on('add remove sort', function () {
                    var data = load();
                    data.columns = columnCollection.toJSON();
                    $storage.val(JSON.stringify(data));
                });
                
                $columnEditForm.itemsManagerEditor({
                    namePattern:  /^oro_report_form\[column\]\[([\w\W]*)\]$/,
                    collection: columnCollection
                });

                $('.query-designer-columns-grid-container .item-container').itemsManagerTable({
                    collection: columnCollection,
                    itemTemplate: $('#report-column-row').html(),
                    itemRender: function (tmpl, data) {
                        var name = entityFieldUtil.splitFieldId(data.name);
                        data.name = formatSelectionTemplate(name);

                        var func = data.func;
                        data.func = func && (func.group_type + ':' + func.group_name + ':' + func.name);

                        return tmpl(data);
                    }
                });
                // end columns
            });
        });
    </script>
{% endblock content_data %}
